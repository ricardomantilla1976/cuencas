/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hydroScalingAPI.modules.swmmCoupling.widgets;

import hydroScalingAPI.modules.swmmCoupling.io.SubBasinsLogManager;
import hydroScalingAPI.modules.swmmCoupling.objects.SwmmFileSketcher;
import java.awt.Component;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
/*
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
*/

/**
 * 
 * @author A. D. L. Zanchetta
 */
public class SwmmFileSketcherDialog extends javax.swing.JDialog {

    private File databaseDirectory;
    
    /**
     * Creates new form SwmmCoupling
     */
    public SwmmFileSketcherDialog(java.awt.Frame parent, 
                        boolean modal,
                        File dataBaseDir) {
        super(parent, modal);
        initComponents();
        
        this.databaseDirectory = dataBaseDir;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        precButGroup = new javax.swing.ButtonGroup();
        polyButGroup = new javax.swing.ButtonGroup();
        outlButGroup = new javax.swing.ButtonGroup();
        outputPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        precPanel = new javax.swing.JPanel();
        precCsvRadio = new javax.swing.JRadioButton();
        precVhcRadio = new javax.swing.JRadioButton();
        precCsvText = new javax.swing.JTextField();
        precCsvButton = new javax.swing.JButton();
        precVhcSelect = new javax.swing.JComboBox();
        precHelpButton = new javax.swing.JButton();
        polyPanel = new javax.swing.JPanel();
        polyKmlRadio = new javax.swing.JRadioButton();
        polyKmlFileText = new javax.swing.JTextField();
        polyKmlButton = new javax.swing.JButton();
        polyPolRadio = new javax.swing.JRadioButton();
        polyVhcSelect = new javax.swing.JComboBox();
        polyKmlIdText = new javax.swing.JTextField();
        polyKmlIdLabel = new javax.swing.JLabel();
        polyKmlOnlyButton = new javax.swing.JButton();
        demPanel = new javax.swing.JPanel();
        demSelect = new javax.swing.JComboBox();
        loglPanel = new javax.swing.JPanel();
        logDefRadio = new javax.swing.JRadioButton();
        logKepRadio = new javax.swing.JRadioButton();
        outSelSelect = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        logNoneRadio = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        addBasinCsvButton = new javax.swing.JToggleButton();
        addBasinCsvText = new javax.swing.JTextField();
        addBasinCsvGoButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addBasinX = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        addBasinY = new javax.swing.JTextField();
        AddBasinXYButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AddedBasinsList = new javax.swing.JList();
        RemoveBasinButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        infilIntLabel = new javax.swing.JLabel();
        infilIntText = new javax.swing.JTextField();
        infilIntUnit = new javax.swing.JLabel();
        ChanFlowVelText = new javax.swing.JTextField();
        HillFlowVelText = new javax.swing.JTextField();
        ChanFlowVelLabel = new javax.swing.JLabel();
        HillFlowVelLabel = new javax.swing.JLabel();
        ChanFlowVelUnit = new javax.swing.JLabel();
        HillFlowVelUnit = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        outpTempDirText = new javax.swing.JTextField();
        outpTempDirButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        outpSwmmInpText = new javax.swing.JTextField();
        outpSwmmButton = new javax.swing.JButton();
        buttCancel = new javax.swing.JButton();
        buttRun = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SWMM coupling");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        precPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Precipitation"));

        precButGroup.add(precCsvRadio);
        precCsvRadio.setText("Import CSV file:");
        precCsvRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                precCsvRadioStateChanged(evt);
            }
        });
        precCsvRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precCsvRadioActionPerformed(evt);
            }
        });

        precButGroup.add(precVhcRadio);
        precVhcRadio.setText("Imported rain event:");
        precVhcRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                precVhcRadioStateChanged(evt);
            }
        });
        precVhcRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precVhcRadioActionPerformed(evt);
            }
        });

        precCsvText.setEditable(false);

        precCsvButton.setText("Search...");
        precCsvButton.setEnabled(false);
        precCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precCsvButtonActionPerformed(evt);
            }
        });

        precVhcSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select..." }));
        precVhcSelect.setEnabled(false);

        precHelpButton.setText("?");
        precHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precHelpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout precPanelLayout = new javax.swing.GroupLayout(precPanel);
        precPanel.setLayout(precPanelLayout);
        precPanelLayout.setHorizontalGroup(
            precPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(precPanelLayout.createSequentialGroup()
                .addComponent(precVhcRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precVhcSelect, 0, 255, Short.MAX_VALUE))
            .addGroup(precPanelLayout.createSequentialGroup()
                .addComponent(precCsvRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precCsvText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precCsvButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precHelpButton)
                .addContainerGap())
        );
        precPanelLayout.setVerticalGroup(
            precPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(precPanelLayout.createSequentialGroup()
                .addGroup(precPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precCsvRadio)
                    .addComponent(precCsvText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(precCsvButton)
                    .addComponent(precHelpButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(precPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precVhcRadio)
                    .addComponent(precVhcSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        polyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Urban polygon"));

        polyButGroup.add(polyKmlRadio);
        polyKmlRadio.setText("Import KML file:");
        polyKmlRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polyKmlRadioActionPerformed(evt);
            }
        });

        polyKmlFileText.setEditable(false);

        polyKmlButton.setText("Search...");
        polyKmlButton.setEnabled(false);
        polyKmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polyKmlButtonActionPerformed(evt);
            }
        });

        polyButGroup.add(polyPolRadio);
        polyPolRadio.setText("Imported polygon:");
        polyPolRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polyPolRadioActionPerformed(evt);
            }
        });

        polyVhcSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select..." }));
        polyVhcSelect.setEnabled(false);

        polyKmlIdText.setEditable(false);

        polyKmlIdLabel.setText("Polygon ID:");

        polyKmlOnlyButton.setText("Only import");
        polyKmlOnlyButton.setEnabled(false);
        polyKmlOnlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polyKmlOnlyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout polyPanelLayout = new javax.swing.GroupLayout(polyPanel);
        polyPanel.setLayout(polyPanelLayout);
        polyPanelLayout.setHorizontalGroup(
            polyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(polyPanelLayout.createSequentialGroup()
                .addGroup(polyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(polyKmlRadio)
                    .addComponent(polyKmlIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(polyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, polyPanelLayout.createSequentialGroup()
                        .addComponent(polyKmlIdText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(polyKmlOnlyButton))
                    .addGroup(polyPanelLayout.createSequentialGroup()
                        .addComponent(polyKmlFileText, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(polyKmlButton))))
            .addGroup(polyPanelLayout.createSequentialGroup()
                .addComponent(polyPolRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(polyVhcSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        polyPanelLayout.setVerticalGroup(
            polyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(polyPanelLayout.createSequentialGroup()
                .addGroup(polyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(polyKmlRadio)
                    .addComponent(polyKmlFileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(polyKmlButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(polyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(polyKmlIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(polyKmlIdLabel)
                    .addComponent(polyKmlOnlyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(polyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(polyPolRadio)
                    .addComponent(polyVhcSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        demPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("DEM"));

        demSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select..." }));
        demSelect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                demSelectItemStateChanged(evt);
            }
        });
        demSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout demPanelLayout = new javax.swing.GroupLayout(demPanel);
        demPanel.setLayout(demPanelLayout);
        demPanelLayout.setHorizontalGroup(
            demPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(demSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        demPanelLayout.setVerticalGroup(
            demPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(demSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        loglPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Subbasins log file"));

        outlButGroup.add(logDefRadio);
        logDefRadio.setSelected(true);
        logDefRadio.setText("Define new subbasins log");
        logDefRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDefRadioActionPerformed(evt);
            }
        });

        outlButGroup.add(logKepRadio);
        logKepRadio.setText("Keep using alread defined (");
        logKepRadio.setEnabled(false);
        logKepRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logKepRadioActionPerformed(evt);
            }
        });

        outSelSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select DEM" }));
        outSelSelect.setEnabled(false);

        jLabel1.setText(")");

        outlButGroup.add(logNoneRadio);
        logNoneRadio.setText("Use only manually defined ('Add basins' tab)");

        javax.swing.GroupLayout loglPanelLayout = new javax.swing.GroupLayout(loglPanel);
        loglPanel.setLayout(loglPanelLayout);
        loglPanelLayout.setHorizontalGroup(
            loglPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loglPanelLayout.createSequentialGroup()
                .addComponent(logKepRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outSelSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1))
            .addGroup(loglPanelLayout.createSequentialGroup()
                .addGroup(loglPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logDefRadio)
                    .addComponent(logNoneRadio))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        loglPanelLayout.setVerticalGroup(
            loglPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loglPanelLayout.createSequentialGroup()
                .addComponent(logDefRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loglPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logKepRadio)
                    .addComponent(outSelSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logNoneRadio))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(precPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(polyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(demPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loglPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(precPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(polyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(demPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loglPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        outputPanel.addTab("Input", jPanel1);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("From CSV file"));

        jToggleButton1.setText("?");
        jToggleButton1.setEnabled(false);

        addBasinCsvButton.setText("Search...");
        addBasinCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBasinCsvButtonActionPerformed(evt);
            }
        });

        addBasinCsvGoButton.setText("Go");
        addBasinCsvGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBasinCsvGoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(addBasinCsvText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBasinCsvButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBasinCsvGoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton1))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jToggleButton1)
                .addComponent(addBasinCsvButton)
                .addComponent(addBasinCsvText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(addBasinCsvGoButton))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Manual"));

        jLabel2.setText("Output at:");

        jLabel4.setText("x:");

        addBasinX.setText("0000");

        jLabel5.setText("y:");

        addBasinY.setText("0000");
        addBasinY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBasinYActionPerformed(evt);
            }
        });

        AddBasinXYButton.setText("Add");
        AddBasinXYButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBasinXYButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBasinX, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBasinY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddBasinXYButton))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jLabel4)
                .addComponent(addBasinX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5)
                .addComponent(addBasinY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(AddBasinXYButton))
        );

        jLabel6.setText("Currend added basins:");

        AddedBasinsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(AddedBasinsList);

        RemoveBasinButton.setText("Remove");
        RemoveBasinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBasinButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveBasinButton)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(RemoveBasinButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        outputPanel.addTab("Add basins", jPanel4);

        infilIntLabel.setText("Infiltration Intensity");

        infilIntText.setText("5.0");

        infilIntUnit.setText("(mm/h)");

        ChanFlowVelText.setText("0.5");

        HillFlowVelText.setText("0.05");

        ChanFlowVelLabel.setText("Channel Flow Velocity");

        HillFlowVelLabel.setText("Hillslope Flow Velocity");

        ChanFlowVelUnit.setText("(m/s)");

        HillFlowVelUnit.setText("(ms)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(HillFlowVelLabel)
                    .addComponent(ChanFlowVelLabel)
                    .addComponent(infilIntLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(infilIntText, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .addComponent(ChanFlowVelText)
                    .addComponent(HillFlowVelText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infilIntUnit)
                    .addComponent(ChanFlowVelUnit)
                    .addComponent(HillFlowVelUnit))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infilIntLabel)
                    .addComponent(infilIntText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(infilIntUnit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChanFlowVelText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ChanFlowVelLabel)
                    .addComponent(ChanFlowVelUnit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HillFlowVelText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HillFlowVelLabel)
                    .addComponent(HillFlowVelUnit))
                .addContainerGap(350, Short.MAX_VALUE))
        );

        outputPanel.addTab("CUENCAS parameters", jPanel3);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Temporary directory"));

        outpTempDirButton.setText("Search...");
        outpTempDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outpTempDirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(outpTempDirText, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outpTempDirButton))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(outpTempDirText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(outpTempDirButton))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("SWMM file"));

        outpSwmmInpText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outpSwmmInpTextActionPerformed(evt);
            }
        });

        outpSwmmButton.setText("Search...");
        outpSwmmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outpSwmmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(outpSwmmInpText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outpSwmmButton))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(outpSwmmInpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(outpSwmmButton))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(300, Short.MAX_VALUE))
        );

        outputPanel.addTab("Output", jPanel2);

        buttCancel.setText("Cancel");
        buttCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttCancelActionPerformed(evt);
            }
        });

        buttRun.setText("Run");
        buttRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputPanel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttRun)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttCancel)
                    .addComponent(buttRun))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttRunActionPerformed
        SwmmFileSketcher swmmCouplingEng;
        Object tmpSelectedObject;
        
        // basic checks
        
        // creating engine object
        swmmCouplingEng = new SwmmFileSketcher();
        swmmCouplingEng.setDatabaseDirectory(this.databaseDirectory);
        
        // bc - precipitation
        if (this.precCsvRadio.isSelected()){
            // lead with CSV rain file situation
            String inputRainFilePath;
            File inputRainFile;
            
            // getting file indication
            inputRainFilePath = this.precCsvText.getText();
            if ((inputRainFilePath == null) || (inputRainFilePath.length() == 0)){
                JOptionPane.showMessageDialog(this, 
                                      "Need inform a CSV file.", 
                                      "Warning - Rain CSV file must be defined", 
                                      JOptionPane.ERROR_MESSAGE);
                return;
            } else if (!inputRainFilePath.endsWith(".csv")) {
                JOptionPane.showMessageDialog(this, 
                                      "Need inform file with .csv extention.", 
                                      "Warning - Rain CSV file wrong extention", 
                                      JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // define csv file
            inputRainFile = new File(inputRainFilePath);
            swmmCouplingEng.setInputCsvRainFile(inputRainFile);
            
        } else if (this.precVhcRadio.isSelected()) {
            // lead with metaVHC situation
            
            tmpSelectedObject = this.precVhcSelect.getSelectedItem();
            if(tmpSelectedObject instanceof LocalComboFile) {
                LocalComboFile selectedComboFile;
                selectedComboFile = (LocalComboFile)tmpSelectedObject;
                
                swmmCouplingEng.setInputVhcRainFile(selectedComboFile.getListedFile());
            } else {
                JOptionPane.showMessageDialog(this, 
                                      "Must select a rain event.", 
                                      "Warning - Rain must be selected", 
                                      JOptionPane.WARNING_MESSAGE);
                return;
            }
            
        } else {
            // lead with missing rain data situation
            JOptionPane.showMessageDialog(this, 
                                      "Must define a rain event.", 
                                      "Warning - Rain is missing", 
                                      JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // bc - polygons
        if (this.polyKmlRadio.isSelected()){
            JOptionPane.showMessageDialog(this, "Import of KML polygon file: not implemented yet.");
        } else if (this.polyPolRadio.isSelected()) {
            tmpSelectedObject = this.polyVhcSelect.getSelectedItem();
            if (tmpSelectedObject instanceof LocalComboFile){
                LocalComboFile tmpSelectedComboFile;
                tmpSelectedComboFile = (LocalComboFile)tmpSelectedObject;
                swmmCouplingEng.setPolygonFile(tmpSelectedComboFile.getListedFile());
            } else {
                JOptionPane.showMessageDialog(this, "Must select a valid polygon.");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Must define urban polygon.");
            return;
        }
        
        // bc - DEM
        tmpSelectedObject = this.demSelect.getSelectedItem();
        if (tmpSelectedObject instanceof LocalComboFile){
            LocalComboFile tmpSelectedComboFile;
            tmpSelectedComboFile = (LocalComboFile)tmpSelectedObject;
            swmmCouplingEng.setMetaDemFile(tmpSelectedComboFile.getListedFile());
        } else {
            JOptionPane.showMessageDialog(this, "Must define base DEM.");
            return;
        }
        
        // bc - subbasin log check
        if ( this.logDefRadio.isSelected() ) {
            // generate log file
            try{
                swmmCouplingEng.remakeSubLogFile();
            } catch (IOException exp) {
                JOptionPane.showMessageDialog(this, exp.getMessage());
            }
            
        } else if (this.logKepRadio.isSelected()) {
            // dont do anything   
        } else if (this.logNoneRadio.isSelected()) {
            // also dont do anything
        }
        
        // add added basins
        int listSize;
        ListModel listModel;
        DefaultListModel defListModel;
        listModel = this.AddedBasinsList.getModel();
        if (listModel instanceof DefaultListModel){
            LocalListBasin curBasin;
            defListModel = (DefaultListModel)listModel;
            listSize = defListModel.getSize();
            for(int count = 0; count < listSize; count++){
                curBasin = (LocalListBasin)defListModel.get(count);
                swmmCouplingEng.addBasin(curBasin.getxOutlet(), 
                                         curBasin.getyOutlet());
            }
        }
        
        // bc - output swmm input file
        if (this.outpSwmmInpText.getText().trim().length() > 0){
            File outputSwmmInpFile;
            outputSwmmInpFile = new File(this.outpSwmmInpText.getText().trim());
            swmmCouplingEng.setOutputSwmmInpFile(outputSwmmInpFile);
        } else {
            JOptionPane.showMessageDialog(this, 
                                          "Output temporary directory file must be defined.", 
                                          "Failure", 
                                          JOptionPane.WARNING_MESSAGE);
            
            return;
        }
        
        // bc - output input file
        if(this.outpTempDirText.getText().trim().length() > 0){
            File outputTempDirectory;
            outputTempDirectory = new File(this.outpTempDirText.getText().trim());
            swmmCouplingEng.setOutputTmpDirectory(outputTempDirectory);
        } else {
            JOptionPane.showMessageDialog(this, "Output SWMM inp file must be defined.");
            return;
        }
        
        // setting CUENCAS parameters
        try{
            float infInt, chnVel, hilVel;
            infInt = Float.parseFloat(this.infilIntText.getText());
            chnVel = Float.parseFloat(this.ChanFlowVelText.getText());
            hilVel = Float.parseFloat(this.HillFlowVelText.getText());
            swmmCouplingEng.setInfiltrationIntensity(infInt);
            swmmCouplingEng.setChannelFlowVelocity(chnVel);
            swmmCouplingEng.setHillslopeFlowVelocity(hilVel);
        } catch (NumberFormatException exp) {
            JOptionPane.showMessageDialog(this, "There is an invalid CUENCAS parameter. Remember numbers must be separated by point in decimal place.");
            return;
        }
        
        // run simulation
        try{
            swmmCouplingEng.generateInpFile();
        } catch (IOException exp){
            System.err.println(exp.getMessage());
        }
    }//GEN-LAST:event_buttRunActionPerformed

    private void precCsvRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precCsvRadioActionPerformed
        if (this.precCsvRadio.isEnabled()){
            this.precCsvButton.setEnabled(true);
            this.precVhcSelect.setEnabled(false);
        }
    }//GEN-LAST:event_precCsvRadioActionPerformed

    private void logDefRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDefRadioActionPerformed
        if( this.logDefRadio.isSelected() ){
            this.outSelSelect.setEnabled(false);
        }
    }//GEN-LAST:event_logDefRadioActionPerformed

    private void outpSwmmInpTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outpSwmmInpTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outpSwmmInpTextActionPerformed

    private void buttCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttCancelActionPerformed

    private void precCsvRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_precCsvRadioStateChanged
        
    }//GEN-LAST:event_precCsvRadioStateChanged

    private void precVhcRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_precVhcRadioStateChanged

    }//GEN-LAST:event_precVhcRadioStateChanged

    private void precVhcRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precVhcRadioActionPerformed
        if (this.precVhcRadio.isEnabled()){
            this.precCsvButton.setEnabled(false);
            this.precVhcSelect.setEnabled(true);
        }
    }//GEN-LAST:event_precVhcRadioActionPerformed

    private void polyKmlRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polyKmlRadioActionPerformed
        if(this.polyKmlRadio.isEnabled()){
            this.polyKmlButton.setEnabled(true);
            this.polyKmlIdText.setEditable(true);
            this.polyKmlOnlyButton.setEnabled(true);
            this.polyVhcSelect.setEnabled(false);
        }
    }//GEN-LAST:event_polyKmlRadioActionPerformed

    private void polyPolRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polyPolRadioActionPerformed
        if(this.polyPolRadio.isSelected()){
            this.polyKmlButton.setEnabled(false);
            this.polyKmlIdText.setEditable(false);
            this.polyKmlOnlyButton.setEnabled(false);
            this.polyVhcSelect.setEnabled(true);
        }
    }//GEN-LAST:event_polyPolRadioActionPerformed

    private void logKepRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logKepRadioActionPerformed
        if( this.logKepRadio.isSelected() ){
            this.outSelSelect.setEnabled(true);
        }
    }//GEN-LAST:event_logKepRadioActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.loadAvailablePoly();
        this.loadAvailableDem();
        this.loadAvailableRain();
    }//GEN-LAST:event_formWindowOpened

    private void demSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demSelectActionPerformed
        
    }//GEN-LAST:event_demSelectActionPerformed

    private void demSelectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_demSelectItemStateChanged
        this.loadAvailableSubBasin();
    }//GEN-LAST:event_demSelectItemStateChanged

    private void outpTempDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outpTempDirButtonActionPerformed
        File selectedFile;
        JFileChooser fc;
        int result;
        
        fc = new JFileChooser("/");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle("Database root directory");
        result = fc.showDialog(this, "Select");
        selectedFile = fc.getSelectedFile();
        
        if (selectedFile != null){
            if (selectedFile.isDirectory()){
                if (selectedFile.canWrite()){
                    this.outpTempDirText.setText(selectedFile.getAbsolutePath());
                } else {
                    JOptionPane.showMessageDialog(this, "Selected directory cannot be writen.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Must select an directory.");
            }
        }
    }//GEN-LAST:event_outpTempDirButtonActionPerformed

    private void outpSwmmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outpSwmmButtonActionPerformed
        File selectedFile;
        JFileChooser fc;
        int result;
        
        fc = new JFileChooser("/");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Destiny SWMM .inp file");
        result = fc.showDialog(this, "Select");
        selectedFile = fc.getSelectedFile();
        
        if (!selectedFile.isDirectory()){
            this.outpSwmmInpText.setText(selectedFile.getAbsolutePath());
        } else {
            JOptionPane.showMessageDialog(this, "Must select a file.");
        }
    }//GEN-LAST:event_outpSwmmButtonActionPerformed

    private void precHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precHelpButtonActionPerformed
        PrecHelpDialog newHelpWindow;
        
        newHelpWindow = new PrecHelpDialog(null, true);
        
        newHelpWindow.setVisible(true);
    }//GEN-LAST:event_precHelpButtonActionPerformed

    private void precCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precCsvButtonActionPerformed
        File selectedFile;
        JFileChooser fc;
        int result;
        
        fc = new JFileChooser("/");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Source .csv file");
        result = fc.showDialog(this, "Select");
        selectedFile = fc.getSelectedFile();
        
        if ((selectedFile != null) && !selectedFile.isDirectory()){
            this.precCsvText.setText(selectedFile.getAbsolutePath());
        } else {
            JOptionPane.showMessageDialog(this, "Must select a file.");
        }
    }//GEN-LAST:event_precCsvButtonActionPerformed

    private void addBasinCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBasinCsvButtonActionPerformed
        File selectedFile;
        JFileChooser fc;
        int result;
        
        fc = new JFileChooser("/");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Source .csv file");
        result = fc.showDialog(this, "Select");
        selectedFile = fc.getSelectedFile();
        
        if ((selectedFile != null) && !selectedFile.isDirectory()){
            this.addBasinCsvText.setText(selectedFile.getAbsolutePath());
        } else {
            JOptionPane.showMessageDialog(this, "Must select a file.");
        }
    }//GEN-LAST:event_addBasinCsvButtonActionPerformed

    private void addBasinYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBasinYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addBasinYActionPerformed

    private void AddBasinXYButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBasinXYButtonActionPerformed
        DefaultListModel defListModel;
        LocalListBasin addedBasin;
        ListModel tempLModel;
        int xBasin, yBasin;
        
        xBasin = Integer.parseInt(this.addBasinX.getText());
        yBasin = Integer.parseInt(this.addBasinY.getText());
        
        addedBasin = new LocalListBasin(xBasin, yBasin);
        
        tempLModel = this.AddedBasinsList.getModel();
        if (!(tempLModel instanceof DefaultListModel)){
            this.AddedBasinsList.setModel(new DefaultListModel());
        }
        
        defListModel = (DefaultListModel)this.AddedBasinsList.getModel();
        defListModel.addElement(addedBasin);
    }//GEN-LAST:event_AddBasinXYButtonActionPerformed

    private void RemoveBasinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBasinButtonActionPerformed
        int selectedIndex;
        ListModel tempListModel;
        DefaultListModel defListModel;
        
        selectedIndex = this.AddedBasinsList.getSelectedIndex();
        
        tempListModel = this.AddedBasinsList.getModel();
        if(!(tempListModel instanceof DefaultListModel)){
            return;
        }
        
        defListModel = (DefaultListModel)tempListModel;
        
        if (selectedIndex > -1){
            defListModel.removeElementAt(selectedIndex);
        }
    }//GEN-LAST:event_RemoveBasinButtonActionPerformed

    private void addBasinCsvGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBasinCsvGoButtonActionPerformed
        DefaultListModel defListModel;
        SubBasinsLogManager logManager;
        LocalListBasin addedBasin;
        ListModel tempLModel;
        String csvFilePath;
        HashMap[] allHash;
        int xOut, yOut;
        File csvFile;
        int count;
        
        csvFilePath = this.addBasinCsvText.getText();
        csvFile = new File(csvFilePath);
        
        if (csvFile.exists() && (!csvFile.isDirectory())){
            try{
                logManager = new SubBasinsLogManager(csvFile);
            } catch (IOException exp) {
                System.err.println("IOException: " + exp.getMessage());
                return;
            }
        } else return;
        
        allHash = logManager.getAllBasins();
        if (allHash == null) return;
        
        for(count = 0; count < allHash.length; count++){
            xOut = (Integer)allHash[count].get("x");
            yOut = (Integer)allHash[count].get("y");
            
            addedBasin = new LocalListBasin(xOut, yOut);
            
            tempLModel = this.AddedBasinsList.getModel();
            if (!(tempLModel instanceof DefaultListModel)){
                this.AddedBasinsList.setModel(new DefaultListModel());
            }
        
            defListModel = (DefaultListModel)this.AddedBasinsList.getModel();
            defListModel.addElement(addedBasin);
        }
    }//GEN-LAST:event_addBasinCsvGoButtonActionPerformed

    private void polyKmlOnlyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polyKmlOnlyButtonActionPerformed

        SwmmFileSketcher swmmCouplingEng;
        Object tmpSelectedObject;
        String polyId;
        File kmlFile;
        
        // main parameters
        //kmlFilePath = "D:\\andre\\trabalho\\2013_udem\\proyecto_swmmAcople\\datosDeMedellin\\areas\\kml\\Huella_Bello.kml";
        
        // creating engine object
        swmmCouplingEng = new SwmmFileSketcher();
        swmmCouplingEng.setDatabaseDirectory(this.databaseDirectory);
        
        // getting basic input data
        polyId = this.polyKmlIdText.getText();
        kmlFile = new File(this.polyKmlFileText.getText());
        
        // getting used DEM
        tmpSelectedObject = this.demSelect.getSelectedItem();
        if (tmpSelectedObject instanceof LocalComboFile){
            LocalComboFile tmpSelectedComboFile;
            tmpSelectedComboFile = (LocalComboFile)tmpSelectedObject;
            swmmCouplingEng.setMetaDemFile(tmpSelectedComboFile.getListedFile());
        } else {
            JOptionPane.showMessageDialog(this, "Must define base DEM.");
            return;
        }
        
        try{
            swmmCouplingEng.importPolygon(kmlFile, polyId);
        } catch (IOException exp) {
            JOptionPane.showMessageDialog(this, exp.getMessage());
        }
    }//GEN-LAST:event_polyKmlOnlyButtonActionPerformed

    private void polyKmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polyKmlButtonActionPerformed
        File selectedFile;
        JFileChooser fc;
        int result;
        
        fc = new JFileChooser("/");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Source .csv file");
        result = fc.showDialog(this, "Select");
        selectedFile = fc.getSelectedFile();
        
        if ((selectedFile != null) && 
                (!selectedFile.isDirectory()) && 
                (result == JFileChooser.APPROVE_OPTION )){
            this.polyKmlFileText.setText(selectedFile.getAbsolutePath());
        } else {
            JOptionPane.showMessageDialog(this, "Must select a file.");
        }
    }//GEN-LAST:event_polyKmlButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwmmFileSketcherDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwmmFileSketcherDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwmmFileSketcherDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwmmFileSketcherDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SwmmFileSketcherDialog dialog = new SwmmFileSketcherDialog(new javax.swing.JFrame(), 
                                                       true,
                                                       null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBasinXYButton;
    private javax.swing.JList AddedBasinsList;
    private javax.swing.JLabel ChanFlowVelLabel;
    private javax.swing.JTextField ChanFlowVelText;
    private javax.swing.JLabel ChanFlowVelUnit;
    private javax.swing.JLabel HillFlowVelLabel;
    private javax.swing.JTextField HillFlowVelText;
    private javax.swing.JLabel HillFlowVelUnit;
    private javax.swing.JButton RemoveBasinButton;
    private javax.swing.JToggleButton addBasinCsvButton;
    private javax.swing.JButton addBasinCsvGoButton;
    private javax.swing.JTextField addBasinCsvText;
    private javax.swing.JTextField addBasinX;
    private javax.swing.JTextField addBasinY;
    private javax.swing.JButton buttCancel;
    private javax.swing.JButton buttRun;
    private javax.swing.JPanel demPanel;
    private javax.swing.JComboBox demSelect;
    private javax.swing.JLabel infilIntLabel;
    private javax.swing.JTextField infilIntText;
    private javax.swing.JLabel infilIntUnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JRadioButton logDefRadio;
    private javax.swing.JRadioButton logKepRadio;
    private javax.swing.JRadioButton logNoneRadio;
    private javax.swing.JPanel loglPanel;
    private javax.swing.JComboBox outSelSelect;
    private javax.swing.ButtonGroup outlButGroup;
    private javax.swing.JButton outpSwmmButton;
    private javax.swing.JTextField outpSwmmInpText;
    private javax.swing.JButton outpTempDirButton;
    private javax.swing.JTextField outpTempDirText;
    private javax.swing.JTabbedPane outputPanel;
    private javax.swing.ButtonGroup polyButGroup;
    private javax.swing.JButton polyKmlButton;
    private javax.swing.JTextField polyKmlFileText;
    private javax.swing.JLabel polyKmlIdLabel;
    private javax.swing.JTextField polyKmlIdText;
    private javax.swing.JButton polyKmlOnlyButton;
    private javax.swing.JRadioButton polyKmlRadio;
    private javax.swing.JPanel polyPanel;
    private javax.swing.JRadioButton polyPolRadio;
    private javax.swing.JComboBox polyVhcSelect;
    private javax.swing.ButtonGroup precButGroup;
    private javax.swing.JButton precCsvButton;
    private javax.swing.JRadioButton precCsvRadio;
    private javax.swing.JTextField precCsvText;
    private javax.swing.JButton precHelpButton;
    private javax.swing.JPanel precPanel;
    private javax.swing.JRadioButton precVhcRadio;
    private javax.swing.JComboBox precVhcSelect;
    // End of variables declaration//GEN-END:variables

    private void loadAvailablePoly(){
        String subDirPath, fileExtention;
        JComboBox comboBox;
        
        subDirPath = File.separator + "Polygons" + File.separator;
        fileExtention = "poly";
        comboBox = this.polyVhcSelect;
        
        this.loadFilesInSubDirectoryIntoSelectbox(subDirPath, 
                                                  fileExtention, 
                                                  comboBox,
                                                  false);
    }
    
    /**
     * Open proper hydrological directory and load all files into the proper ComboBox
     */
    private void loadAvailableRain(){
        String subDirPath, fileExtention;
        JComboBox comboBox;
        
        subDirPath = File.separator + "Rasters" + File.separator + "Hydrology" + File.separator;
        fileExtention = "metaVHC";
        comboBox = this.precVhcSelect;
        
        this.loadFilesInSubDirectoryIntoSelectbox(subDirPath, 
                                                  fileExtention, 
                                                  comboBox,
                                                  true);
    }
    
    private void loadAvailableSubBasin(){
        DefaultComboBoxModel defOutSelModel;
        Component[] currentComponents;
        LocalComboFile selectedDem;
        SubBasinsLogManager logMng;
        ComboBoxModel outSelModel;
        String selectedDemPath;
        HashMap[] allSubBasins;
        File selectedDemFile;
        String subBasinPath;
        File subBasinFile;
        String tmpStr;
        Object tmpObj;
        int curSize;
        int count;
        
        // clean previous content

        // get combo model and clean it if necessary
        outSelModel = this.outSelSelect.getModel();
        if (outSelModel instanceof DefaultComboBoxModel){
            defOutSelModel = (DefaultComboBoxModel)outSelModel;
        } else {
            return;
        }
        curSize = defOutSelModel.getSize();
        if (curSize > 1){
            count = 0;
            while(count < curSize){
                defOutSelModel.removeElementAt(0);
                count++;
            }
        }
        
        // populate with current content of respective subLog file for selected DEM
        tmpObj = this.demSelect.getSelectedItem();
        if (tmpObj instanceof LocalComboFile){
            selectedDem = (LocalComboFile)tmpObj;
            selectedDemFile = selectedDem.getListedFile();
            selectedDemPath = selectedDemFile.getPath();
            subBasinPath = selectedDemPath.replace(".metaDEM", ".subLog");
            subBasinFile = new File(subBasinPath);
            
            if (subBasinFile.exists()){
                
                // get combo model
                outSelModel = this.outSelSelect.getModel();
                if (outSelModel instanceof DefaultComboBoxModel){
                    defOutSelModel = (DefaultComboBoxModel)outSelModel;
                } else return;
                
                try{
                    LocalComboHash curComboHash;
                    defOutSelModel.addElement("Preview:");
                    logMng = new SubBasinsLogManager(subBasinFile);
                    allSubBasins = logMng.getAllBasins();
                    for(count = 0; count < allSubBasins.length; count++){
                        curComboHash = new LocalComboHash(allSubBasins[count]);
                        defOutSelModel.addElement(curComboHash);
                    }
                    
                } catch (IOException exp) {
                    
                }
                
                this.logKepRadio.setSelected(true);
                this.logKepRadio.setEnabled(true);
                this.outSelSelect.setEnabled(true);
            } else {
                this.logDefRadio.setSelected(true);
                this.logKepRadio.setEnabled(false);
                this.outSelSelect.setEnabled(false);
            }
        } else {
            defOutSelModel.addElement("Select DEM");
            this.logDefRadio.setSelected(true);
            this.logKepRadio.setEnabled(false);
            this.outSelSelect.setEnabled(false);
        }
    }
    
    private void loadAvailableDem(){
        String subDirPath, fileExtention;
        JComboBox comboBox;
        
        subDirPath = File.separator + "Rasters" + File.separator + "Topography" + File.separator;
        fileExtention = "metaDEM";
        comboBox = this.demSelect;
        
        this.loadFilesInSubDirectoryIntoSelectbox(subDirPath, 
                                                  fileExtention, 
                                                  comboBox,
                                                  false);
    }

    /**
     * Read all files with proper extention and add it to proper ComboBox
     * @param subDirPath_arg Directory Path to be read
     * @param fileExtention_arg Extention to be considered (without point)
     * @param selectBox_arg ComboBox to be filled
     * @param recursive_arg TRUE if must read directories recursively, FALSE otherwise
     */
    private void loadFilesInSubDirectoryIntoSelectbox(String subDirPath_arg,
                                                      String fileExtention_arg,
                                                      JComboBox selectBox_arg,
                                                      boolean recursive_arg){
        DefaultComboBoxModel curDefMod;
        LocalComboFile curListFile;
        ComboBoxModel curMod;
        Component curComp;
        File[] allFiles;
        File curFile;
        int count;
        
        if (recursive_arg) {
            allFiles = this.loadFilesInSubDirectoryRec(subDirPath_arg, 
                                                       fileExtention_arg);
        } else {
            allFiles = this.loadFilesInSubDirectory(subDirPath_arg, 
                                                    fileExtention_arg);
        }
        
        curMod = selectBox_arg.getModel();
        if (curMod instanceof DefaultComboBoxModel) {
            curDefMod = (DefaultComboBoxModel)curMod;
        } else {
            return;
        }
        
        for(count = 0; count < allFiles.length; count++){
            
            curListFile = new LocalComboFile(allFiles[count]);
            curDefMod.addElement(curListFile);
        }
        
    }
    
    /**
     * Read all files, recursively, in a directory and returns a vector with all of them
     * @param subDirPath_arg Internal Path for directory to be read, internal to database
     * @param fileExtention_arg File extention to be considered
     * @return Vector with all files in directory
     */
    private File[] loadFilesInSubDirectoryRec(String subDirPath_arg,
                                              String fileExtention_arg){
        String subDirectoryFullPath;
        File subDirectory;
        Collection files;
        Iterator filesIt;
        File[] retVec;
        int count;
        
        // get absolute path for directoy
        subDirectoryFullPath = this.databaseDirectory.getPath() + subDirPath_arg;
        subDirectory = new File(subDirectoryFullPath);
        
        // list all internal files recursively
        files = FileUtils.listFiles(subDirectory, 
                                    new RegexFileFilter(".*" + fileExtention_arg), 
                                    DirectoryFileFilter.DIRECTORY);
        
        // convert obtained list into a vector
        if (files != null){
            retVec = new File[files.size()];
            filesIt = files.iterator();
            count = 0;
            while(filesIt.hasNext()){
                retVec[count] = (File)filesIt.next();
                count++;
            }
        } else {
            retVec = null;
        }
        
        return(retVec);
    }
    
    private File[] loadFilesInSubDirectory(String subDirPath_arg,
                                           String fileExtention_arg){
        
        String subDirectoryFullPath;
        File subDirectory;
        FilenameFilter filNameFilt;
        
        // basic check
        if ((this.databaseDirectory == null) || (!this.databaseDirectory.isDirectory())){
            return (null);
        }
        
        if (subDirPath_arg == null){
            return (null);
        }
        
        // 
        subDirectoryFullPath = this.databaseDirectory.getPath() + subDirPath_arg;
        subDirectory = new File(subDirectoryFullPath);
        
        // check if ok
        if (!subDirectory.exists() || !subDirectory.canRead()) {
            return (null);
        }
        
        filNameFilt = new LocalFilenameFilter(fileExtention_arg);
        
        return (subDirectory.listFiles(filNameFilt));
    }
}
