/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TabbedUSGSDownloadWizard.java
 *
 * Created on Mar 31, 2009, 1:11:41 AM
 */
package hydroScalingAPI.subGUIs.widgets;

/**
 *
 * @author Eric Osgood
 */
import java.awt.Dimension;
import java.io.*;
import java.lang.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import java.util.*;
import javax.swing.table.*;
import javax.swing.text.Element;

public class TabbedUSGSDownloadWizard extends javax.swing.JDialog {

    private hydroScalingAPI.subGUIs.widgets.ImportUSGSWeb myQueryManager;
    private javax.swing.JCheckBox[] listOfCheckBoxes;

    /** Creates new form TabbedUSGSDownloadWizard */
    public TabbedUSGSDownloadWizard(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setTitle("Import USGS data from Internet");
        myQueryManager = new hydroScalingAPI.subGUIs.widgets.ImportUSGSWeb();

        System.out.println("line 40");

        if (!myQueryManager.connectionTest()) {
            Object[] options = {"OK"};
            if (JOptionPane.showOptionDialog(this, "Connection to Internet Failed!", "Attention", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]) == 1) {
                return;
            }
            return;
        }
        System.out.println("line 47");

        initComponents();
        setLocation(220, 200);

        System.out.println("line 52  components running");

        java.util.Calendar todaysDate = java.util.Calendar.getInstance();

        System.out.println((todaysDate.get(todaysDate.YEAR)) + "-" + (todaysDate.get(todaysDate.MONTH) + 1) + "-" + todaysDate.get(todaysDate.DAY_OF_MONTH));
        EndText.setText((todaysDate.get(todaysDate.YEAR)) + "-" + (todaysDate.get(todaysDate.MONTH) + 1) + "-" + todaysDate.get(todaysDate.DAY_OF_MONTH));

        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        Map = new javax.swing.JPanel();
        USGSMap = new javax.swing.JLabel();
        USGSLegend = new javax.swing.JLabel();
        RegionState = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        NorthEast = new javax.swing.JCheckBox();
        South = new javax.swing.JCheckBox();
        MidWest = new javax.swing.JCheckBox();
        West = new javax.swing.JCheckBox();
        AllReg = new javax.swing.JCheckBox();
        AllST = new javax.swing.JCheckBox();
        AL = new javax.swing.JCheckBox();
        AK = new javax.swing.JCheckBox();
        AZ = new javax.swing.JCheckBox();
        AR = new javax.swing.JCheckBox();
        CA = new javax.swing.JCheckBox();
        CO = new javax.swing.JCheckBox();
        CT = new javax.swing.JCheckBox();
        DE = new javax.swing.JCheckBox();
        DC = new javax.swing.JCheckBox();
        FL = new javax.swing.JCheckBox();
        GA = new javax.swing.JCheckBox();
        HI = new javax.swing.JCheckBox();
        ID = new javax.swing.JCheckBox();
        IL = new javax.swing.JCheckBox();
        IN = new javax.swing.JCheckBox();
        IA = new javax.swing.JCheckBox();
        KS = new javax.swing.JCheckBox();
        KY = new javax.swing.JCheckBox();
        LA = new javax.swing.JCheckBox();
        ME = new javax.swing.JCheckBox();
        MD = new javax.swing.JCheckBox();
        MA = new javax.swing.JCheckBox();
        MI = new javax.swing.JCheckBox();
        MN = new javax.swing.JCheckBox();
        MS = new javax.swing.JCheckBox();
        MO = new javax.swing.JCheckBox();
        MT = new javax.swing.JCheckBox();
        NE = new javax.swing.JCheckBox();
        NV = new javax.swing.JCheckBox();
        NH = new javax.swing.JCheckBox();
        NJ = new javax.swing.JCheckBox();
        NM = new javax.swing.JCheckBox();
        NY = new javax.swing.JCheckBox();
        NC = new javax.swing.JCheckBox();
        ND = new javax.swing.JCheckBox();
        OH = new javax.swing.JCheckBox();
        OK = new javax.swing.JCheckBox();
        OR = new javax.swing.JCheckBox();
        PA = new javax.swing.JCheckBox();
        RI = new javax.swing.JCheckBox();
        SC = new javax.swing.JCheckBox();
        SD = new javax.swing.JCheckBox();
        TN = new javax.swing.JCheckBox();
        TX = new javax.swing.JCheckBox();
        UT = new javax.swing.JCheckBox();
        VT = new javax.swing.JCheckBox();
        VA = new javax.swing.JCheckBox();
        WA = new javax.swing.JCheckBox();
        WV = new javax.swing.JCheckBox();
        WI = new javax.swing.JCheckBox();
        WY = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        BoundingBox = new javax.swing.JPanel();
        EastLon2 = new javax.swing.JTextField();
        EastLon = new javax.swing.JLabel();
        NorthLat2 = new javax.swing.JTextField();
        NorthLat = new javax.swing.JLabel();
        WestLon2 = new javax.swing.JTextField();
        WestLon = new javax.swing.JLabel();
        SouthLat2 = new javax.swing.JTextField();
        SouthLat = new javax.swing.JLabel();
        GetBoundData = new javax.swing.JButton();
        getCoordFile = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        boundInstruct = new javax.swing.JTextArea();
        boundPic = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        Stream = new javax.swing.JCheckBox();
        GageHeight = new javax.swing.JCheckBox();
        DownloadData = new javax.swing.JButton();
        Spinner = new javax.swing.JLabel();
        Working = new javax.swing.JLabel();
        SiteCounterInfo = new javax.swing.JLabel();
        EndDate = new javax.swing.JLabel();
        StartDate = new javax.swing.JLabel();
        EndText = new javax.swing.JTextField();
        StartText = new javax.swing.JTextField();
        CheckAll = new javax.swing.JLabel();
        UncheckAll = new javax.swing.JLabel();
        CheckMarked = new javax.swing.JLabel();
        Note = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        USGSMap.setIcon(new javax.swing.JLabel() {
            public javax.swing.Icon getIcon() {
                try {
                    return new javax.swing.ImageIcon(
                        new java.net.URL("http://water.usgs.gov/waterwatch/images/real/us/realb.gif")
                    );
                } catch (java.net.MalformedURLException e) {
                }
                return null;
            }
        }.getIcon());

        USGSLegend.setIcon(new javax.swing.JLabel() {
            public javax.swing.Icon getIcon() {
                try {
                    return new javax.swing.ImageIcon(
                        new java.net.URL("http://water.usgs.gov/waterwatch/images/map_legends/ptile_dot.gif")
                    );
                } catch (java.net.MalformedURLException e) {
                }
                return null;
            }
        }.getIcon());

        org.jdesktop.layout.GroupLayout MapLayout = new org.jdesktop.layout.GroupLayout(Map);
        Map.setLayout(MapLayout);
        MapLayout.setHorizontalGroup(
            MapLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MapLayout.createSequentialGroup()
                .addContainerGap()
                .add(USGSMap)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(USGSLegend)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        MapLayout.setVerticalGroup(
            MapLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MapLayout.createSequentialGroup()
                .addContainerGap()
                .add(MapLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(USGSMap)
                    .add(USGSLegend))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Map", Map);

        jLabel1.setText("What region or regions?");

        jLabel2.setText("What state or states?");

        NorthEast.setText("NorthEast");
        NorthEast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NorthEastMouseReleased(evt);
            }
        });

        South.setText("South");
        South.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SouthMouseReleased(evt);
            }
        });

        MidWest.setText("MidWest");
        MidWest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MidWestMouseReleased(evt);
            }
        });

        West.setText("West");
        West.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                WestMouseReleased(evt);
            }
        });

        AllReg.setText("All");
        AllReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllRegActionPerformed(evt);
            }
        });

        AllST.setText("All");
        AllST.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AllSTMouseReleased(evt);
            }
        });

        AL.setText("AL");
        AL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ALMouseReleased(evt);
            }
        });

        AK.setText("AK");
        AK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AKMouseReleased(evt);
            }
        });

        AZ.setText("AZ");
        AZ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AZMouseReleased(evt);
            }
        });

        AR.setText("AR");
        AR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ARMouseReleased(evt);
            }
        });

        CA.setText("CA");
        CA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CAMouseReleased(evt);
            }
        });

        CO.setText("CO");
        CO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                COMouseReleased(evt);
            }
        });

        CT.setText("CT");
        CT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CTMouseReleased(evt);
            }
        });

        DE.setText("DE");
        DE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                DEMouseReleased(evt);
            }
        });

        DC.setText("DC");
        DC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                DCMouseReleased(evt);
            }
        });

        FL.setText("FL");
        FL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                FLMouseReleased(evt);
            }
        });

        GA.setText("GA");
        GA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GAMouseReleased(evt);
            }
        });

        HI.setText("HI");
        HI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                HIMouseReleased(evt);
            }
        });

        ID.setText("ID");
        ID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IDMouseReleased(evt);
            }
        });

        IL.setText("IL");
        IL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ILMouseReleased(evt);
            }
        });

        IN.setText("IN");
        IN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                INMouseReleased(evt);
            }
        });

        IA.setText("IA");
        IA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                IAMouseReleased(evt);
            }
        });

        KS.setText("KS");
        KS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KSMouseReleased(evt);
            }
        });

        KY.setText("KY");
        KY.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                KYMouseReleased(evt);
            }
        });

        LA.setText("LA");
        LA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                LAMouseReleased(evt);
            }
        });

        ME.setText("ME");
        ME.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MEMouseReleased(evt);
            }
        });

        MD.setText("MD");
        MD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MDMouseReleased(evt);
            }
        });

        MA.setText("MA");
        MA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MAMouseReleased(evt);
            }
        });

        MI.setText("MI");
        MI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MIMouseReleased(evt);
            }
        });

        MN.setText("MN");
        MN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MNMouseReleased(evt);
            }
        });

        MS.setText("MS");
        MS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MSMouseReleased(evt);
            }
        });

        MO.setText("MO");
        MO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MOMouseReleased(evt);
            }
        });

        MT.setText("MT");
        MT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MTMouseReleased(evt);
            }
        });

        NE.setText("NE");
        NE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NEMouseReleased(evt);
            }
        });

        NV.setText("NV");
        NV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NVMouseReleased(evt);
            }
        });

        NH.setText("NH");
        NH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NHMouseReleased(evt);
            }
        });

        NJ.setText("NJ");
        NJ.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NJMouseReleased(evt);
            }
        });

        NM.setText("NM");
        NM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NMMouseReleased(evt);
            }
        });

        NY.setText("NY");
        NY.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NYMouseReleased(evt);
            }
        });

        NC.setText("NC");
        NC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NCMouseReleased(evt);
            }
        });

        ND.setText("ND");
        ND.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NDMouseReleased(evt);
            }
        });

        OH.setText("OH");
        OH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                OHMouseReleased(evt);
            }
        });

        OK.setText("OK");
        OK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                OKMouseReleased(evt);
            }
        });

        OR.setText("OR");
        OR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ORMouseReleased(evt);
            }
        });

        PA.setText("PA");
        PA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                PAMouseReleased(evt);
            }
        });

        RI.setText("RI");
        RI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RIMouseReleased(evt);
            }
        });

        SC.setText("SC");
        SC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SCMouseReleased(evt);
            }
        });

        SD.setText("SD");
        SD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                SDMouseReleased(evt);
            }
        });

        TN.setText("TN");
        TN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TNMouseReleased(evt);
            }
        });

        TX.setText("TX");
        TX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TXMouseReleased(evt);
            }
        });

        UT.setText("UT");
        UT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                UTMouseReleased(evt);
            }
        });

        VT.setText("VT");
        VT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                VTMouseReleased(evt);
            }
        });

        VA.setText("VA");
        VA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                VAMouseReleased(evt);
            }
        });

        WA.setText("WA");
        WA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                WAMouseReleased(evt);
            }
        });

        WV.setText("WV");
        WV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                WVMouseReleased(evt);
            }
        });

        WI.setText("WI");
        WI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                WIMouseReleased(evt);
            }
        });

        WY.setText("WY");
        WY.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                WYMouseReleased(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.JLabel() {
            public javax.swing.Icon getIcon() {
                try {
                    return new javax.swing.ImageIcon(
                        new java.net.URL("http://www.cc.gatech.edu/cpl/projects/graphcuttextures/data/interaction/LittleRiver.jpg")
                    );
                } catch (java.net.MalformedURLException e) {
                }
                return null;
            }
        }.getIcon());

        org.jdesktop.layout.GroupLayout RegionStateLayout = new org.jdesktop.layout.GroupLayout(RegionState);
        RegionState.setLayout(RegionStateLayout);
        RegionStateLayout.setHorizontalGroup(
            RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RegionStateLayout.createSequentialGroup()
                .addContainerGap()
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(West)
                    .add(AllReg)
                    .add(MidWest)
                    .add(South)
                    .add(NorthEast))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(RegionStateLayout.createSequentialGroup()
                        .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(AZ)
                            .add(AR)
                            .add(CA)
                            .add(AK)
                            .add(AllST)
                            .add(AL))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(CO)
                            .add(CT)
                            .add(DE)
                            .add(DC)
                            .add(FL)
                            .add(GA))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(IA)
                            .add(KS)
                            .add(IL)
                            .add(IN)
                            .add(HI)
                            .add(ID)))
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(MI)
                    .add(MA)
                    .add(MD)
                    .add(ME)
                    .add(LA)
                    .add(KY))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(NV)
                    .add(NE)
                    .add(MT)
                    .add(MO)
                    .add(MS)
                    .add(MN))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(NC)
                    .add(ND)
                    .add(NY)
                    .add(NM)
                    .add(NH)
                    .add(NJ))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(SC)
                    .add(RI)
                    .add(PA)
                    .add(OR)
                    .add(OK)
                    .add(OH))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(SD)
                    .add(TN)
                    .add(TX)
                    .add(UT)
                    .add(VT)
                    .add(VA))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(WY)
                    .add(WI)
                    .add(WV)
                    .add(WA))
                .add(18, 18, 18)
                .add(jLabel9)
                .addContainerGap(116, Short.MAX_VALUE))
        );
        RegionStateLayout.setVerticalGroup(
            RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(RegionStateLayout.createSequentialGroup()
                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(RegionStateLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(jLabel2))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(RegionStateLayout.createSequentialGroup()
                                .add(AllReg)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(West)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(MidWest)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(South))
                            .add(RegionStateLayout.createSequentialGroup()
                                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(AllST, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(CO)
                                    .add(HI)
                                    .add(KY)
                                    .add(MN)
                                    .add(NH)
                                    .add(OH)
                                    .add(SD)
                                    .add(WA))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(AL)
                                    .add(CT)
                                    .add(ID)
                                    .add(LA)
                                    .add(MS)
                                    .add(NJ)
                                    .add(OK)
                                    .add(TN)
                                    .add(WV))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(AK)
                                    .add(DE)
                                    .add(IL)
                                    .add(ME)
                                    .add(MO)
                                    .add(NM)
                                    .add(OR)
                                    .add(TX)
                                    .add(WI))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(AZ)
                                    .add(DC)
                                    .add(IN)
                                    .add(MD)
                                    .add(MT)
                                    .add(NY)
                                    .add(PA)
                                    .add(UT)
                                    .add(WY))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(AR)
                                    .add(FL)
                                    .add(IA)
                                    .add(MA)
                                    .add(NE)
                                    .add(NC)
                                    .add(RI)
                                    .add(VT)
                                    .add(NorthEast))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(RegionStateLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(CA)
                                    .add(GA)
                                    .add(KS)
                                    .add(MI)
                                    .add(NV)
                                    .add(ND)
                                    .add(SC)
                                    .add(VA)))))
                    .add(RegionStateLayout.createSequentialGroup()
                        .add(32, 32, 32)
                        .add(jLabel9)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Region/State", RegionState);

        EastLon2.setText("180");

        EastLon.setText("Easternmost Longitude");

        NorthLat2.setText("90");

        NorthLat.setText("Northernmost Latitude");

        WestLon2.setText("-180");

        WestLon.setText("Westernmost Longitude");

        SouthLat2.setText("-90");

        SouthLat.setText("Southernmost Latitude");

        GetBoundData.setText("Get Data");
        GetBoundData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GetBoundDataMouseReleased(evt);
            }
        });

        getCoordFile.setText("Get Coordinate from File");
        getCoordFile.setToolTipText("Get coordinates from metaDEM");
        getCoordFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getCoordFileActionPerformed(evt);
            }
        });

        boundInstruct.setColumns(20);
        boundInstruct.setEditable(false);
        boundInstruct.setRows(5);
        boundInstruct.setText("Enter coordinates into boxes\nin decimal degree format then\npress \"Get Data\".");
        jScrollPane2.setViewportView(boundInstruct);

        boundPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hydroScalingAPI/subGUIs/configuration/icons/bound.gif"))); // NOI18N

        org.jdesktop.layout.GroupLayout BoundingBoxLayout = new org.jdesktop.layout.GroupLayout(BoundingBox);
        BoundingBox.setLayout(BoundingBoxLayout);
        BoundingBoxLayout.setHorizontalGroup(
            BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(BoundingBoxLayout.createSequentialGroup()
                .addContainerGap()
                .add(BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, BoundingBoxLayout.createSequentialGroup()
                        .add(BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(BoundingBoxLayout.createSequentialGroup()
                                .add(69, 69, 69)
                                .add(boundPic)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(SouthLat))
                            .add(BoundingBoxLayout.createSequentialGroup()
                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 240, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 163, Short.MAX_VALUE)
                                .add(NorthLat)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(NorthLat2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(SouthLat2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(337, 337, 337))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, BoundingBoxLayout.createSequentialGroup()
                        .add(WestLon)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(WestLon2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 138, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(211, 211, 211)
                        .add(EastLon, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(EastLon2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(102, 102, 102))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, BoundingBoxLayout.createSequentialGroup()
                        .add(getCoordFile)
                        .add(96, 96, 96)
                        .add(GetBoundData)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BoundingBoxLayout.linkSize(new java.awt.Component[] {EastLon2, NorthLat2, SouthLat2, WestLon2}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        BoundingBoxLayout.setVerticalGroup(
            BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(BoundingBoxLayout.createSequentialGroup()
                .addContainerGap()
                .add(BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, BoundingBoxLayout.createSequentialGroup()
                            .add(47, 47, 47)
                            .add(BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(NorthLat2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(NorthLat))
                            .add(144, 144, 144)
                            .add(BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(SouthLat)
                                .add(SouthLat2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(74, 74, 74)
                            .add(BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(GetBoundData)
                                .add(getCoordFile))
                            .addContainerGap())
                        .add(BoundingBoxLayout.createSequentialGroup()
                            .add(121, 121, 121)
                            .add(BoundingBoxLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(WestLon2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(WestLon)
                                .add(EastLon)
                                .add(EastLon2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(boundPic)
                            .addContainerGap()))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPane1.addTab("Bounding Box", BoundingBox);

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "Code", "Site Name", "Lat (deg:min:sec)", "Lon (deg:min:sec)", "Drainage Area"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dataTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(dataTable);
        dataTable.getColumnModel().getColumn(0).setMinWidth(24);
        dataTable.getColumnModel().getColumn(0).setPreferredWidth(24);
        dataTable.getColumnModel().getColumn(0).setMaxWidth(24);
        dataTable.getColumnModel().getColumn(1).setMinWidth(75);
        dataTable.getColumnModel().getColumn(1).setPreferredWidth(75);
        dataTable.getColumnModel().getColumn(1).setMaxWidth(75);
        dataTable.getColumnModel().getColumn(2).setMinWidth(300);
        dataTable.getColumnModel().getColumn(2).setPreferredWidth(450);
        dataTable.getColumnModel().getColumn(2).setMaxWidth(800);
        dataTable.getColumnModel().getColumn(3).setMinWidth(110);
        dataTable.getColumnModel().getColumn(3).setPreferredWidth(110);
        dataTable.getColumnModel().getColumn(3).setMaxWidth(110);
        dataTable.getColumnModel().getColumn(4).setMinWidth(110);
        dataTable.getColumnModel().getColumn(4).setPreferredWidth(110);
        dataTable.getColumnModel().getColumn(4).setMaxWidth(110);
        dataTable.getColumnModel().getColumn(5).setMinWidth(110);
        dataTable.getColumnModel().getColumn(5).setPreferredWidth(110);
        dataTable.getColumnModel().getColumn(5).setMaxWidth(110);

        Stream.setText("Streamflow");

        GageHeight.setText("Gage height");

        DownloadData.setText("Download Data");
        DownloadData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                DownloadDataMouseReleased(evt);
            }
        });

        Spinner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hydroScalingAPI/subGUIs/configuration/icons/spinner.gif"))); // NOI18N

        Working.setText("Working...");

        SiteCounterInfo.setText("There are X sites available.");

        EndDate.setText("End Date");

        StartDate.setText("Start Date");

        EndText.setText("2009-05-20");

        StartText.setText("1800-01-01");
        StartText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                StartTextFocusLost(evt);
            }
        });

        CheckAll.setForeground(new java.awt.Color(0, 0, 255));
        CheckAll.setText("Check All");
        CheckAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CheckAllMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CheckAllMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CheckAllMouseReleased(evt);
            }
        });

        UncheckAll.setForeground(new java.awt.Color(0, 0, 255));
        UncheckAll.setText("Uncheck All");
        UncheckAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                UncheckAllMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                UncheckAllMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                UncheckAllMouseReleased(evt);
            }
        });

        CheckMarked.setForeground(new java.awt.Color(0, 0, 225));
        CheckMarked.setText("Check Unmarked");
        CheckMarked.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CheckMarkedMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CheckMarkedMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                CheckMarkedMouseReleased(evt);
            }
        });

        Note.setEditable(false);
        Note.setText("NOTE:  Querying many sites and/or a large range of dates may take a long time.  Please be patient.");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(Stream)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(GageHeight)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 393, Short.MAX_VALUE)
                .add(StartDate)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(StartText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(EndDate)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EndText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DownloadData)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(SiteCounterInfo)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(CheckAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(UncheckAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CheckMarked, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Note, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 504, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 6, Short.MAX_VALUE)
                .add(Working)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(Spinner)
                .addContainerGap())
            .add(jTabbedPane1)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {EndText, StartText}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 406, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Spinner)
                    .add(Working)
                    .add(SiteCounterInfo)
                    .add(CheckAll)
                    .add(UncheckAll)
                    .add(CheckMarked)
                    .add(Note, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 193, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Stream)
                    .add(GageHeight)
                    .add(DownloadData)
                    .add(EndText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(StartText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(StartDate)
                    .add(EndDate))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void makeTable(Vector<String> myVector) {

        SiteCounterInfo.setText("There are " + myVector.size() + " sites available");
        listOfCheckBoxes = new javax.swing.JCheckBox[myVector.size()];

        Object[][] template = new Object[myVector.size()][5];
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
                template,
                new String[]{
                    "", "Code", "Site Name", "Lat (deg:min:sec)", "Lon(deg:min:sec)", "Drainage Area"}) {

            public Class getColumnClass(int column) {
                try {
                    if (column == 0) {
                        return Class.forName("java.lang.Boolean");
                    }
                    return Class.forName("java.lang.Object");
                } catch (ClassNotFoundException ex) {
                    ex.printStackTrace();
                    return null;
                }
            }
        });
        jScrollPane1.setViewportView(dataTable);

        for (int k = 0; k < myVector.size(); k++) {
            String[] elements = myVector.get(k).toString().split("\t");
            dataTable.selectAll();
            dataTable.clearSelection();

            listOfCheckBoxes[k] = new javax.swing.JCheckBox();
            listOfCheckBoxes[k].setSelected(true);

            dataTable.setValueAt(new Boolean(true), k, 0);
            dataTable.setValueAt(elements[1], k, 1);
            dataTable.setValueAt(elements[2], k, 2);

            String lat = elements[3];
            lat = lat.substring(0, 2) + ":" + lat.substring(2, 4) + ":" + lat.substring(4, 6) + " N";
            dataTable.setValueAt(lat, k, 3);

            String lon = elements[4];
            lon = lon.substring(0, 3) + ":" + lon.substring(3, 5) + ":" + lon.substring(5, 7) + " W";
            dataTable.setValueAt(lon, k, 4);

            if (elements.length == 8) {
                dataTable.setValueAt(elements[7], k, 5);
            } else {
                dataTable.setValueAt("N / A", k, 5);
            }
        }
        //dataTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn col1 = dataTable.getColumnModel().getColumn(0);
        TableColumn col2 = dataTable.getColumnModel().getColumn(1);
        TableColumn col3 = dataTable.getColumnModel().getColumn(2);
        TableColumn col4 = dataTable.getColumnModel().getColumn(3);
        TableColumn col5 = dataTable.getColumnModel().getColumn(4);
        TableColumn col6 = dataTable.getColumnModel().getColumn(5);
        col1.setMinWidth(24);
        col1.setMaxWidth(24);
        col1.setPreferredWidth(24);

        col2.setMinWidth(85);
        col2.setMaxWidth(85);
        col2.setPreferredWidth(85);

        col3.setMinWidth(300);
        col3.setMaxWidth(800);
        col3.setPreferredWidth(450);

        col4.setMinWidth(110);
        col4.setMaxWidth(110);
        col4.setPreferredWidth(110);

        col5.setMinWidth(110);
        col5.setMaxWidth(110);
        col5.setPreferredWidth(110);

        col6.setMinWidth(110);
        col6.setMaxWidth(110);
        col6.setPreferredWidth(110);
    }

    private void StartTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_StartTextFocusLost

        if (StartText.getText().equalsIgnoreCase("")) {
            StartText.setText("1800-01-01");
            return;
        } else {
            String[] elements = StartText.getText().split("-");
            if (elements.length == 3) {
                try {
                    java.util.Calendar thisDate = java.util.Calendar.getInstance();
                    thisDate.set(Integer.parseInt(elements[0]), Integer.parseInt(elements[1]), Integer.parseInt(elements[2]));
                } catch (NumberFormatException numberFormatException) {
                    StartText.setText("1800-01-01");
                    return;
                }
            } else {
                StartText.setText("1800-01-01");
                return;
            }
        }
    }//GEN-LAST:event_StartTextFocusLost

    private void dataTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseReleased
        System.out.println(java.util.Arrays.toString(dataTable.getSelectedRows()));

        int arr[] = dataTable.getSelectedRows();
        for (int i = 0; i < arr.length; i++) {
            System.out.println(dataTable.getValueAt(arr[i], 0) + " " + dataTable.getValueAt(arr[i], 1));
        }
    }//GEN-LAST:event_dataTableMouseReleased

    private void DownloadDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DownloadDataMouseReleased
        int sel = dataTable.getRowCount();
        Boolean check2 = true;

        String[] s = new String[]{StartText.getText(), EndText.getText()};
        Vector v = new Vector();
        Vector v2 = new Vector();
        s[0] = StartText.getText();
        s[1] = EndText.getText();


        javax.swing.JFileChooser fc = new javax.swing.JFileChooser("/");
        fc.setFileSelectionMode(fc.DIRECTORIES_ONLY);
        fc.setDialogTitle("Gauges Directory");
        int result = fc.showDialog(this, "Select");
        java.io.File selectedFile = fc.getSelectedFile();

        if (result == javax.swing.JFileChooser.CANCEL_OPTION) {
            return;
        }

        String[] outputDirs = new String[2];
        outputDirs[0] = selectedFile.getAbsolutePath()+File.separator+"StreamFlow";
        outputDirs[1] = selectedFile.getAbsolutePath()+File.separator+"Stage";

        for (int i = 0; i < 2; i++) {

            boolean success = (new File(outputDirs[i])).mkdirs();
            if (success) {
                System.out.println("Directories: " + outputDirs[i] + " created");
            } else {
                System.out.println("Directories " + outputDirs[i] + " not created");
            }
        }

        

        for (int j = 0; j < sel; j++) {
            if (dataTable.getValueAt(j, 0).equals(check2)) {
                //String[] codes = new String[]{(dataTable.getValueAt(sel[j], 1))};
                v.addElement(dataTable.getValueAt(j, 1));
                System.out.println(v);
                System.out.println(s.toString());
            }
        }

        try {
            myQueryManager.getData(s, v,outputDirs);
        } catch (IOException ex) {
            Logger.getLogger(TabbedUSGSDownloadWizard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DownloadDataMouseReleased

    private void CheckAllMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckAllMouseReleased
        for (int i = 0; i < dataTable.getRowCount(); i++) {
            dataTable.setValueAt(new Boolean(true), i, 0);
        }
    }//GEN-LAST:event_CheckAllMouseReleased

    private void UncheckAllMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UncheckAllMouseReleased
        for (int i = 0; i < dataTable.getRowCount(); i++) {
            dataTable.setValueAt(new Boolean(false), i, 0);
        }
    }//GEN-LAST:event_UncheckAllMouseReleased

    private void CheckMarkedMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckMarkedMouseReleased
        for (int i = 0; i < dataTable.getRowCount(); i++) {
            dataTable.setValueAt(new Boolean(!((Boolean) dataTable.getValueAt(i, 0))), i, 0);
        }
    }//GEN-LAST:event_CheckMarkedMouseReleased

    private void CheckAllMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckAllMouseEntered
        final String under = "<html><u>Check All</u></html>";
        CheckAll.setText(under);
    }//GEN-LAST:event_CheckAllMouseEntered

    private void CheckAllMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckAllMouseExited
        final String noUnder = "Check All";
        CheckAll.setText(noUnder);
    }//GEN-LAST:event_CheckAllMouseExited

    private void UncheckAllMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UncheckAllMouseEntered
        final String under = "<html><u>Uncheck All</u><html>";
        UncheckAll.setText(under);
    }//GEN-LAST:event_UncheckAllMouseEntered

    private void UncheckAllMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UncheckAllMouseExited
        final String noUnder = "Uncheck All";
        UncheckAll.setText(noUnder);
    }//GEN-LAST:event_UncheckAllMouseExited

    private void CheckMarkedMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckMarkedMouseEntered
        final String under = "<html><u>Check Unmarked</u><html>";
        CheckMarked.setText(under);
    }//GEN-LAST:event_CheckMarkedMouseEntered

    private void CheckMarkedMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckMarkedMouseExited
        final String noUnder = "Check Unmarked";
        CheckMarked.setText(noUnder);
    }//GEN-LAST:event_CheckMarkedMouseExited

    private void WYMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WYMouseReleased
        if (WY.isSelected()) {
            System.out.println(WY.isSelected());
            String[][] statesparam = new String[][]{{"WY"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_WYMouseReleased

    private void WIMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WIMouseReleased
        if (WI.isSelected()) {
            System.out.println(WI.isSelected());
            String[][] statesparam = new String[][]{{"WI"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_WIMouseReleased

    private void WVMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WVMouseReleased
        if (WV.isSelected()) {
            System.out.println(WV.isSelected());
            String[][] statesparam = new String[][]{{"WV"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_WVMouseReleased

    private void WAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WAMouseReleased
        if (WA.isSelected()) {
            System.out.println(WA.isSelected());
            String[][] statesparam = new String[][]{{"WA"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_WAMouseReleased

    private void VAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VAMouseReleased
        if (VA.isSelected()) {
            System.out.println(VA.isSelected());
            String[][] statesparam = new String[][]{{"VA"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_VAMouseReleased

    private void VTMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VTMouseReleased
        if (VT.isSelected()) {
            System.out.println(VT.isSelected());
            String[][] statesparam = new String[][]{{"VT"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_VTMouseReleased

    private void UTMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UTMouseReleased
        if (UT.isSelected()) {
            System.out.println(UT.isSelected());
            String[][] statesparam = new String[][]{{"UT"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_UTMouseReleased

    private void TXMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TXMouseReleased
        if (TX.isSelected()) {
            System.out.println(TX.isSelected());
            String[][] statesparam = new String[][]{{"TX"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_TXMouseReleased

    private void TNMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TNMouseReleased
        if (TN.isSelected()) {
            System.out.println(TN.isSelected());
            String[][] statesparam = new String[][]{{"TN"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_TNMouseReleased

    private void SDMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SDMouseReleased
        if (SD.isSelected()) {
            System.out.println(SD.isSelected());
            String[][] statesparam = new String[][]{{"SD"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_SDMouseReleased

    private void SCMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SCMouseReleased
        if (SC.isSelected()) {
            System.out.println(SC.isSelected());
            String[][] statesparam = new String[][]{{"SC"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_SCMouseReleased

    private void RIMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RIMouseReleased
        if (RI.isSelected()) {
            System.out.println(RI.isSelected());
            String[][] statesparam = new String[][]{{"RI"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_RIMouseReleased

    private void PAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PAMouseReleased
        if (PA.isSelected()) {
            System.out.println(PA.isSelected());
            String[][] statesparam = new String[][]{{"PA"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_PAMouseReleased

    private void ORMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ORMouseReleased
        if (OR.isSelected()) {
            System.out.println(OR.isSelected());
            String[][] statesparam = new String[][]{{"OR"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_ORMouseReleased

    private void OKMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OKMouseReleased
        if (OK.isSelected()) {
            System.out.println(OK.isSelected());
            String[][] statesparam = new String[][]{{"OK"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_OKMouseReleased

    private void OHMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OHMouseReleased
        if (OH.isSelected()) {
            System.out.println(OH.isSelected());
            String[][] statesparam = new String[][]{{"OH"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_OHMouseReleased

    private void NDMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NDMouseReleased
        if (ND.isSelected()) {
            System.out.println(ND.isSelected());
            String[][] statesparam = new String[][]{{"ND"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_NDMouseReleased

    private void NCMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NCMouseReleased
        if (NC.isSelected()) {
            System.out.println(NC.isSelected());
            String[][] statesparam = new String[][]{{"NC"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_NCMouseReleased

    private void NYMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NYMouseReleased
        if (NY.isSelected()) {
            System.out.println(NY.isSelected());
            String[][] statesparam = new String[][]{{"NY"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_NYMouseReleased

    private void NMMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NMMouseReleased
        if (NM.isSelected()) {
            System.out.println(NM.isSelected());
            String[][] statesparam = new String[][]{{"NM"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_NMMouseReleased

    private void NJMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NJMouseReleased
        if (NJ.isSelected()) {
            System.out.println(NJ.isSelected());
            String[][] statesparam = new String[][]{{"NJ"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_NJMouseReleased

    private void NHMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NHMouseReleased
        if (NH.isSelected()) {
            System.out.println(NH.isSelected());
            String[][] statesparam = new String[][]{{"NH"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_NHMouseReleased

    private void NVMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NVMouseReleased
        if (NV.isSelected()) {
            System.out.println(NV.isSelected());
            String[][] statesparam = new String[][]{{"NV"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_NVMouseReleased

    private void NEMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NEMouseReleased
        if (NE.isSelected()) {
            System.out.println(NE.isSelected());
            String[][] statesparam = new String[][]{{"NE"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_NEMouseReleased

    private void MTMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MTMouseReleased
        if (MT.isSelected()) {
            System.out.println(MT.isSelected());
            String[][] statesparam = new String[][]{{"MT"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_MTMouseReleased

    private void MOMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MOMouseReleased
        if (MO.isSelected()) {
            System.out.println(MO.isSelected());
            String[][] statesparam = new String[][]{{"MO"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_MOMouseReleased

    private void MSMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MSMouseReleased
        if (MS.isSelected()) {
            System.out.println(MS.isSelected());
            String[][] statesparam = new String[][]{{"MS"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_MSMouseReleased

    private void MNMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MNMouseReleased
        if (MN.isSelected()) {
            System.out.println(MN.isSelected());
            String[][] statesparam = new String[][]{{"MN"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_MNMouseReleased

    private void MIMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MIMouseReleased
        if (MI.isSelected()) {
            System.out.println(MI.isSelected());
            String[][] statesparam = new String[][]{{"MI"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_MIMouseReleased

    private void MAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MAMouseReleased
        if (MA.isSelected()) {
            System.out.println(MA.isSelected());
            String[][] statesparam = new String[][]{{"MA"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_MAMouseReleased

    private void MDMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MDMouseReleased
        if (MD.isSelected()) {
            System.out.println(MD.isSelected());
            String[][] statesparam = new String[][]{{"MD"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_MDMouseReleased

    private void MEMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MEMouseReleased
        if (ME.isSelected()) {
            System.out.println(ME.isSelected());
            String[][] statesparam = new String[][]{{"ME"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_MEMouseReleased

    private void LAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LAMouseReleased
        if (LA.isSelected()) {
            System.out.println(LA.isSelected());
            String[][] statesparam = new String[][]{{"LA"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_LAMouseReleased

    private void KYMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KYMouseReleased
        if (KY.isSelected()) {
            System.out.println(KY.isSelected());
            String[][] statesparam = new String[][]{{"KY"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_KYMouseReleased

    private void KSMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KSMouseReleased
        if (KS.isSelected()) {
            System.out.println(KS.isSelected());
            String[][] statesparam = new String[][]{{"KS"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_KSMouseReleased

    private void IAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IAMouseReleased
        if (IA.isSelected()) {
            System.out.println(IA.isSelected());
            String[][] statesparam = new String[][]{{"IA"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_IAMouseReleased

    private void INMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_INMouseReleased
        if (IN.isSelected()) {
            System.out.println(IN.isSelected());
            String[][] statesparam = new String[][]{{"IN"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_INMouseReleased

    private void ILMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ILMouseReleased
        if (IL.isSelected()) {
            System.out.println(IL.isSelected());
            String[][] statesparam = new String[][]{{"IL"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_ILMouseReleased

    private void IDMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IDMouseReleased
        if (ID.isSelected()) {
            System.out.println(ID.isSelected());
            String[][] statesparam = new String[][]{{"ID"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_IDMouseReleased

    private void HIMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HIMouseReleased
        if (HI.isSelected()) {
            System.out.println(HI.isSelected());
            String[][] statesparam = new String[][]{{"HI"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_HIMouseReleased

    private void GAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GAMouseReleased
        if (GA.isSelected()) {
            System.out.println(GA.isSelected());
            String[][] statesparam = new String[][]{{"GA"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_GAMouseReleased

    private void FLMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FLMouseReleased
        if (FL.isSelected()) {
            System.out.println(FL.isSelected());
            String[][] statesparam = new String[][]{{"FL"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_FLMouseReleased

    private void DCMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DCMouseReleased
        if (DC.isSelected()) {
            System.out.println(DC.isSelected());
            String[][] statesparam = new String[][]{{"DC"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_DCMouseReleased

    private void DEMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DEMouseReleased
        if (DE.isSelected()) {
            System.out.println(DE.isSelected());
            String[][] statesparam = new String[][]{{"DE"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_DEMouseReleased

    private void CTMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CTMouseReleased
        if (CT.isSelected()) {
            System.out.println(CT.isSelected());
            String[][] statesparam = new String[][]{{"CT"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_CTMouseReleased

    private void COMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_COMouseReleased
        if (CO.isSelected()) {
            System.out.println(CO.isSelected());
            String[][] statesparam = new String[][]{{"CO"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_COMouseReleased

    private void CAMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CAMouseReleased
        if (CA.isSelected()) {
            System.out.println(CA.isSelected());
            String[][] statesparam = new String[][]{{"CA"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_CAMouseReleased

    private void ARMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ARMouseReleased
        if (AR.isSelected()) {
            System.out.println(AR.isSelected());
            String[][] statesparam = new String[][]{{"AR"}, {"Stream", "Gage Height", "Volume"}};
            Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_ARMouseReleased

    private void AZMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AZMouseReleased
        if (AZ.isSelected()) {
            System.out.println(AZ.isSelected());
            String[][] statesparam = new String[][]{{"AZ"}, {"Stream", "Gage Height", "Volume"}};
            java.util.Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_AZMouseReleased

    private void AKMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AKMouseReleased
        if (AK.isSelected()) {
            System.out.println(AK.isSelected());
            String[][] statesparam = new String[][]{{"AK"}, {"Stream", "Gage Height", "Volume"}};
            java.util.Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);
        }
}//GEN-LAST:event_AKMouseReleased

    private void ALMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ALMouseReleased

        if (AL.isSelected()) {
            System.out.println(AL.isSelected());
            String[][] statesparam = new String[][]{{"AL"}, {"Stream", "Gage Height", "Volume"}};
            java.util.Vector myVector = myQueryManager.filterByState(statesparam);
            makeTable(myVector);

        }
}//GEN-LAST:event_ALMouseReleased

    private void AllSTMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AllSTMouseReleased
        System.out.println(AllST.isSelected());
        AL.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        AK.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        AZ.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        AR.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        CA.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        CO.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        CT.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        DE.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        DC.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        FL.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        GA.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        HI.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        ID.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        IL.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        IN.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        IA.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        KS.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        KY.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        LA.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        ME.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        MD.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        MA.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        MI.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        MN.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        MS.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        MO.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        MT.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        NE.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        NV.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        NH.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        NJ.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        NM.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        NY.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        NC.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        ND.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        OH.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        OK.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        OR.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        PA.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        RI.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        SC.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        SD.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        TN.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        TX.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        UT.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        VT.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        VA.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        WA.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        WV.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        WI.setSelected(AllST.isSelected());
        System.out.println(AllST.isSelected());
        WY.setSelected(AllST.isSelected());


        if (AllST.isSelected()) {
            System.out.println(AllST.isSelected());
            String[][] statesparam = new String[][]{{"AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL",
                    "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME",
                    "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH",
                    "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI",
                    "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI",
                    "WY"}, {"Stream", "Gage Height", "Volume"}};
        //java.util.Vector myVector = myQueryManager.filterAllState(statesparam);
        }
}//GEN-LAST:event_AllSTMouseReleased

    private void AllRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllRegActionPerformed
        System.out.println(AllReg.isSelected());
        NorthEast.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        South.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        MidWest.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        West.setSelected(AllReg.isSelected());

        System.out.println(AllReg.isSelected());
        AllST.setSelected(AllReg.isSelected());

        System.out.println(AllReg.isSelected());
        AL.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        AK.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        AZ.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        AR.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        CA.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        CO.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        CT.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        DE.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        DC.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        FL.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        GA.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        HI.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        ID.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        IL.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        IN.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        IA.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        KS.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        KY.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        LA.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        ME.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        MD.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        MA.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        MI.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        MN.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        MS.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        MO.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        MT.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        NE.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        NV.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        NH.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        NJ.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        NM.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        NY.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        NC.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        ND.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        OH.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        OK.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        OR.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        PA.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        RI.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        SC.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        SD.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        TN.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        TX.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        UT.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        VT.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        VA.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        WA.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        WV.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        WI.setSelected(AllReg.isSelected());
        System.out.println(AllReg.isSelected());
        WY.setSelected(AllReg.isSelected());

        if (AllReg.isSelected()) {
            System.out.println(AllReg.isSelected());
            String[][] statesparam = new String[][]{{"AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL",
                    "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME",
                    "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH",
                    "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI",
                    "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI",
                    "WY"}, {"Stream", "Gage Height", "Volume"}};
        //java.util.Vector myVector = myQueryManager.filterAllState(statesparam);
        }
}//GEN-LAST:event_AllRegActionPerformed

    private void WestMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WestMouseReleased
        System.out.println(West.isSelected());
        WA.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        OR.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        CA.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        ID.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        NV.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        MT.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        WY.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        UT.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        AZ.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        CO.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        NM.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        AK.setSelected(West.isSelected());
        System.out.println(West.isSelected());
        HI.setSelected(West.isSelected());

        if (West.isSelected()) {
            System.out.println(West.isSelected());
            String[][] statesparam = new String[][]{{"WA", "OR", "CA", "ID", "NV", "MT", "WY", "UT",
                    "AZ", "CO", "NM", "AK", "HI"}, {"Stream", "Gage Height", "Volume"}};
        //java.util.Vector myVector = myQueryManager.filterWestReg(statesparam);
        }
}//GEN-LAST:event_WestMouseReleased

    private void MidWestMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MidWestMouseReleased
        System.out.println(MidWest.isSelected());
        WI.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        MI.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        IL.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        IN.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        OH.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        ND.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        SD.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        NE.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        KS.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        MN.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        IA.setSelected(MidWest.isSelected());
        System.out.println(MidWest.isSelected());
        MO.setSelected(MidWest.isSelected());

        if (MidWest.isSelected()) {
            System.out.println(MidWest.isSelected());
            String[][] statesparam = new String[][]{{"WI", "MI", "IL", "IN", "OH",
                    "ND", "SD", "NE", "KS", "MN", "IA", "MO"}, {"Stream", "Gage Height", "Volume"}};
        //java.util.Vector myVector = myQueryManager.filterMidWestReg(statesparam);
        }
}//GEN-LAST:event_MidWestMouseReleased

    private void SouthMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SouthMouseReleased
        System.out.println(South.isSelected());
        DE.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        MD.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        DC.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        VA.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        WV.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        NC.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        SC.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        GA.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        FL.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        KY.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        TN.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        MS.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        AL.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        OK.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        TX.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        AR.setSelected(South.isSelected());
        System.out.println(South.isSelected());
        LA.setSelected(South.isSelected());

        if (South.isSelected()) {
            System.out.println(South.isSelected());
            String[][] statesparam = new String[][]{{"DE", "MD", "DC", "VA", "WV", "NC", "SC", "GA",
                    "FL", "KY", "TN", "MS", "AL", "OK", "TX", "AR", "LA"}, {"Stream", "Gage Height", "Volume"}};
        //java.util.Vector myVector = myQueryManager.filterSouthReg(statesparam);
        }
}//GEN-LAST:event_SouthMouseReleased

    private void NorthEastMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NorthEastMouseReleased
        System.out.println(NorthEast.isSelected());
        ME.setSelected(NorthEast.isSelected());
        System.out.println(NorthEast.isSelected());
        NH.setSelected(NorthEast.isSelected());
        System.out.println(NorthEast.isSelected());
        VT.setSelected(NorthEast.isSelected());
        System.out.println(NorthEast.isSelected());
        MA.setSelected(NorthEast.isSelected());
        System.out.println(NorthEast.isSelected());
        RI.setSelected(NorthEast.isSelected());
        System.out.println(NorthEast.isSelected());
        CT.setSelected(NorthEast.isSelected());
        System.out.println(NorthEast.isSelected());
        NY.setSelected(NorthEast.isSelected());
        System.out.println(NorthEast.isSelected());
        PA.setSelected(NorthEast.isSelected());
        System.out.println(NorthEast.isSelected());
        NJ.setSelected(NorthEast.isSelected());

        if (NorthEast.isSelected()) {
            System.out.println(NorthEast.isSelected());
            String[][] statesparam = new String[][]{{"ME", "NH", "VT", "MA", "RI",
                    "CT", "NY", "PA", "NJ"}, {"Stream", "Gage Height", "Volume"}};
        //java.util.Vector myVector = myQueryManager.filterNorthEastReg(statesparam);
        }
}//GEN-LAST:event_NorthEastMouseReleased

    private void GetBoundDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GetBoundDataMouseReleased
        String west, north, east, south;
        String[] bound = new String[4];

        west = WestLon2.getText();
        north = NorthLat2.getText();
        east = EastLon2.getText();
        south = SouthLat2.getText();
        bound[0] = west;
        bound[1] = north;
        bound[2] = east;
        bound[3] = south;
        //System.out.println(bound);

        Vector face = myQueryManager.filterByLatLon(bound);
        makeTable(face);
    }//GEN-LAST:event_GetBoundDataMouseReleased

    private void getCoordFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getCoordFileActionPerformed
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser("/");
        fc.setFileSelectionMode(fc.FILES_ONLY);
        fc.setDialogTitle("DEM Selection");
        javax.swing.filechooser.FileFilter mdtFilter = new visad.util.ExtensionFileFilter("metaDEM", "Digital Elevation Model");
        fc.addChoosableFileFilter(mdtFilter);
        int result = fc.showDialog(this, "Select");
        if (result == javax.swing.JFileChooser.CANCEL_OPTION) {
            return;
        }
        if (!fc.getSelectedFile().isFile()) {
            return;
        }
        try {
            hydroScalingAPI.io.MetaRaster metaDEM = new hydroScalingAPI.io.MetaRaster(fc.getSelectedFile());
            NorthLat2.setText(Double.toString(metaDEM.getMaxLat()));
            SouthLat2.setText(Double.toString(metaDEM.getMinLat()));
            EastLon2.setText(Double.toString(metaDEM.getMaxLon()));
            WestLon2.setText(Double.toString(metaDEM.getMinLon()));

            System.err.println(metaDEM.getMaxLon());
            System.err.println(metaDEM.getMaxLat());
            System.err.println(metaDEM.getMinLon());
            System.err.println(metaDEM.getMinLat());
        } catch (IOException ex) {
            Logger.getLogger(TabbedUSGSDownloadWizard.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_getCoordFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        TabbedUSGSDownloadWizard dialog = new TabbedUSGSDownloadWizard(new javax.swing.JFrame(), true);
        System.exit(0);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AK;
    private javax.swing.JCheckBox AL;
    private javax.swing.JCheckBox AR;
    private javax.swing.JCheckBox AZ;
    private javax.swing.JCheckBox AllReg;
    private javax.swing.JCheckBox AllST;
    private javax.swing.JPanel BoundingBox;
    private javax.swing.JCheckBox CA;
    private javax.swing.JCheckBox CO;
    private javax.swing.JCheckBox CT;
    private javax.swing.JLabel CheckAll;
    private javax.swing.JLabel CheckMarked;
    private javax.swing.JCheckBox DC;
    private javax.swing.JCheckBox DE;
    private javax.swing.JButton DownloadData;
    private javax.swing.JLabel EastLon;
    private javax.swing.JTextField EastLon2;
    private javax.swing.JLabel EndDate;
    private javax.swing.JTextField EndText;
    private javax.swing.JCheckBox FL;
    private javax.swing.JCheckBox GA;
    private javax.swing.JCheckBox GageHeight;
    private javax.swing.JButton GetBoundData;
    private javax.swing.JCheckBox HI;
    private javax.swing.JCheckBox IA;
    private javax.swing.JCheckBox ID;
    private javax.swing.JCheckBox IL;
    private javax.swing.JCheckBox IN;
    private javax.swing.JCheckBox KS;
    private javax.swing.JCheckBox KY;
    private javax.swing.JCheckBox LA;
    private javax.swing.JCheckBox MA;
    private javax.swing.JCheckBox MD;
    private javax.swing.JCheckBox ME;
    private javax.swing.JCheckBox MI;
    private javax.swing.JCheckBox MN;
    private javax.swing.JCheckBox MO;
    private javax.swing.JCheckBox MS;
    private javax.swing.JCheckBox MT;
    private javax.swing.JPanel Map;
    private javax.swing.JCheckBox MidWest;
    private javax.swing.JCheckBox NC;
    private javax.swing.JCheckBox ND;
    private javax.swing.JCheckBox NE;
    private javax.swing.JCheckBox NH;
    private javax.swing.JCheckBox NJ;
    private javax.swing.JCheckBox NM;
    private javax.swing.JCheckBox NV;
    private javax.swing.JCheckBox NY;
    private javax.swing.JCheckBox NorthEast;
    private javax.swing.JLabel NorthLat;
    private javax.swing.JTextField NorthLat2;
    private javax.swing.JTextField Note;
    private javax.swing.JCheckBox OH;
    private javax.swing.JCheckBox OK;
    private javax.swing.JCheckBox OR;
    private javax.swing.JCheckBox PA;
    private javax.swing.JCheckBox RI;
    private javax.swing.JPanel RegionState;
    private javax.swing.JCheckBox SC;
    private javax.swing.JCheckBox SD;
    private javax.swing.JLabel SiteCounterInfo;
    private javax.swing.JCheckBox South;
    private javax.swing.JLabel SouthLat;
    private javax.swing.JTextField SouthLat2;
    private javax.swing.JLabel Spinner;
    private javax.swing.JLabel StartDate;
    private javax.swing.JTextField StartText;
    private javax.swing.JCheckBox Stream;
    private javax.swing.JCheckBox TN;
    private javax.swing.JCheckBox TX;
    private javax.swing.JLabel USGSLegend;
    private javax.swing.JLabel USGSMap;
    private javax.swing.JCheckBox UT;
    private javax.swing.JLabel UncheckAll;
    private javax.swing.JCheckBox VA;
    private javax.swing.JCheckBox VT;
    private javax.swing.JCheckBox WA;
    private javax.swing.JCheckBox WI;
    private javax.swing.JCheckBox WV;
    private javax.swing.JCheckBox WY;
    private javax.swing.JCheckBox West;
    private javax.swing.JLabel WestLon;
    private javax.swing.JTextField WestLon2;
    private javax.swing.JLabel Working;
    private javax.swing.JTextArea boundInstruct;
    private javax.swing.JLabel boundPic;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton getCoordFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
